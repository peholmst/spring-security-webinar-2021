# Run on port 8081 to avoid a conflict with Keycloak
server.port=8081
# Always use SSL. In this case, we're using a self-signed certificate but in a real application we would of course use a proper certificate.
server.ssl.key-alias=selfsigned
server.ssl.key-store=file:/Users/petterwork/Vaadin/spring-security-webinar/keystore.p12
server.ssl.key-store-password=changeit
server.ssl.enabled=true
# First, we need to tell the application where to find our Keycloak instance (in a real application, Keycloak would also be using HTTPS)
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8080/auth/realms/webinar/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/auth/realms/webinar/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8080/auth/realms/webinar/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8080/auth/realms/webinar/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/auth/realms/webinar
# Second, we need to tell the application what info to pass to the Keycloak instance
spring.security.oauth2.client.registration.keycloak.client-id=webinar-sample-app
spring.security.oauth2.client.registration.keycloak.client-secret=dda9b37f-37c5-4c02-8a2f-b04c2ba7720d
spring.security.oauth2.client.registration.keycloak.scope=profile,email,roles
# Needed by KeycloakUserLookupService
keycloak.rest-api-uri=http://localhost:8080/auth/admin/realms/webinar
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:~/security-webinar-sample-app
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.hibernate.ddl-auto=update
logging.level.org.vaadin.webinar.security=debug
